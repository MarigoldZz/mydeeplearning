import torch

x = torch.arange(12)
print(x)
print(x.shape)
print(x.numel())
X = x.reshape(3, 4)
print(X)
print(torch.zeros(2, 3, 4))
print(torch.ones(2, 3, 4))
print(torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]]))
a = torch.tensor([1.0, 2, 4, 8])
b = torch.tensor([2, 2, 2, 2])
print([a + b, a - b, a * b, a / b, a ** b])
print(torch.exp(a))
a = torch.arange(12, dtype=torch.float32).reshape(3, 4)
b = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])
x = torch.cat((a, b), dim=0)
y = torch.cat((a, b), dim=1)
print(x)
print(y)
print(x.shape)
print(y.shape)
print(a == b)
print(X.sum())
a = torch.arange(3).reshape(3, 1)
b = torch.arange(2).reshape(1, 2)
print(a)
print(b)
print(a + b)
print(X)
print(X[-1])
print(X[1:3])
X[0, 0] = 9
print(X)
X[0:2, :] = 12
print(X)
before = id(X)
X = X + X
print(before == id(X))
z = torch.zeros_like(X)
print("id(z):", id(z))
z[:] = X + X
print("id(z):", id(z))
before = id(X)
print(X)
X += 1
print(X)
print(id(X) == before)
A = X.numpy()
B = torch.tensor(A)
print(type(A), type(B))
a = torch.tensor([3.5])
print(a, a.item(), float(a), int(a))